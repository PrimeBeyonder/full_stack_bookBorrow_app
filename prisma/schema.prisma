datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Genre {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  isbn            String   @unique
  publicationYear Int
  publisher       String
  description     String
  coverImage      String?
  genreId         String
  genre           Genre    @relation(fields: [genreId], references: [id])
  language        String
  pageCount       Int
  availableCopies Int
  totalCopies     Int
  rating          Float?
  reviews         Review[]
  borrowings      Borrowing[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  borrowings Borrowing[]
  reviews    Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrowing {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  borrowDate DateTime @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowingStatus
  user       User     @relation(fields: [userId], references: [id])
  book       Book     @relation(fields: [bookId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
}