// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String?
  password            String
  bio                 String?
  avatar              String?
  role                Role                 @default(USER)
  borrowings          Borrowing[]
  reviews             Review[]
  wishlist            WishlistItem[]
  passwordResetTokens PasswordResetToken[]
  emailVerified       Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Book {
  id              String         @id @default(cuid())
  title           String
  author          String
  isbn            String         @unique
  publicationYear Int
  publisher       String
  description     String
  coverImage      String?
  ebookFile       String?
  genres          Genre[]
  language        String
  pageCount       Int
  availableCopies Int
  totalCopies     Int
  borrowings      Borrowing[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model WishlistItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())

  @@unique([userId, bookId])
}

model Genre {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Borrowing {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  book       Book         @relation(fields: [bookId], references: [id])
  bookId     String
  borrowDate DateTime     @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowStatus
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String

  @@unique([userId, bookId])
}

enum Role {
  USER
  ADMIN
}

enum BorrowStatus {
  BORROWED
  RETURNED
  OVERDUE
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, token])
}
